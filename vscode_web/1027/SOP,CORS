SOP(Same-Origin Policy, 동일 출처 정책) -> 브라우저 보안 정책
    protocol + port + host 가 모두 동일한 출처일 때 same origin
    다른 origin(=cross origin) 에서의 리소스와 상호작용 할 수 없게 제한하는 정책
    나의 origin에서만 리소스를 활용하므로 공격 가능성을 줄이는 효과
    브라우저 규칙이며, 브라우저 -> 서버로 요청시 정책이 적용됨
    브라우저를 거치지 않는 서버 간(서버 to 서버) 통신의 경우 정책 적용 안됨

CORS(Cross Origin Resource Sharing, 교차출처리소스공유 정책)
    다른 출처에서의 리소스 활용을 위해 대응하는 방식이 많이 존재
    그 중 아래와 같은 방식으로
    - jsonp
    - 서버우회
    - proxy서버 활용 
    교차출처에서 리소스를 가져와 활용할 수 있도록 함
    추가 HTTP 헤더를 사용하여 자원에 접근할 수 있는 권한을 부여하고 
    그 내용을 브라우저에 알리는 체제

정리 
    1. 자바스크립트에서 외부 서버로 요청할 경우 SOP 정책에 의해 요청 실패
    2. 정책은 보안을 위한 좋은 방법이지만, 외부호출을 많이 사용하는 대규모의 프로젝트
    입장에서는 약간 사용이 번거러움
    3. 위 사항을 극복하기 위해 추가 정책인 CORS가 등장 => 서버에서 일부를 허용하는 방식
    4. 서버의 도움없이 회피하고자 하는 방식들이 존재
      * 브라우저 실행 시 외부 요청을 허용하는 옵션 사용
      * 외부 요청을 가능하게 하는 플러그인 설치
      * JSONP방식 사용 (사용 지양)
      * 서버우회
      * 대리 서버를 통한 우회
    5. 서버를 제어해 브라우저와 서버간 통신을 가능하게 하는 CORS 적용(최종보스)